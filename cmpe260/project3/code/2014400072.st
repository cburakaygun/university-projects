Object subclass: #Dota	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Dota class	instanceVariableNames: ''!!Dota class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 4/28/2017 23:38'!new^self subclassResponsibility ! !Dota subclass: #GameArena	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!GameArena commentStamp: 'CemalBurakAygun 5/20/2017 12:14' prior: 0!Representation of the game arena which handles the game mechanics and dynamics.This class interacts with the players, maintains a turn-based game and prints various information on Transcript along the game.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameArena class	instanceVariableNames: ''!!GameArena class methodsFor: 'user interaction' stamp: 'CemalBurakAygun 5/20/2017 12:40'!takeActionFor: player enemy: enemy	"Asks the user to choose an action and applies the effects of the chosen action. Also, applies the effects of the passive skills Vampiric Aura and Mana Break."	"In addition, prints the effects mentioned above on Transcript."	"Expected Parameter Types: player (Hero object)   ,   enemy (Hero object)"	"Returns: Action that player chose (string)"| actionList activeSkills availableSkills givenDamage actualDamage curActionIndex curSkill splitEarth pulseNova isSplitEarthDecreased |actionList := { 'Attack' }.		"An array of strings. It will contain available actions for player to choose. The action 'Attack' is always available and is always at the first index."availableSkills := {  }.			"An array of ActiveSkill objects. It will contain the active skills of player which are not in cooldown."activeSkills := player getActiveSkills.isSplitEarthDecreased := false.		"This variable is a flag for restoring the current cooldown value of the active skill Split Earth if it is decreased by 1 at the turn Leshrac deactivated the active skill Pulse Nova. (deactivating the active skill Pulse Nova does NOT waste the turn)"(player isMemberOf: Leshrac) 		"Because of the uniqe feature of the active skill Pulse Nova, Leshrac is handled separately from other Heroes."ifTrue: [ 			splitEarth := (activeSkills at: 1).     pulseNova := (activeSkills at: 2).						(splitEarth getCurCooldown = 0)			ifTrue: [ (player getCurMP >= splitEarth getManaUsage)						"If the active skill Split Earth is NOT in cooldown AND the current MP of player is NOT less than the value of mana usage of Split Earth, it is added into availableSkills and its name is added into actionList."						ifTrue: [ availableSkills := availableSkills copyWith: splitEarth.									actionList := actionList copyWith: 'Use Split Earth'.						].			]			ifFalse: [ splitEarth setCurCooldown: ((splitEarth getCurCooldown) - 1).							isSplitEarthDecreased := true.			].						(pulseNova getIsActivated)			"If the Pulse Nova is already activated, an action to deactivate it is added into actionList."			ifTrue: [ actionList := actionList copyWith: 'Deactivate Pulse Nova' ]			ifFalse: [ (player getCurMP >= pulseNova getManaUsage)							"If the active skill Pulse Nova is deactive AND is NOT in cooldown AND the current MP of player is NOT less than the value of mana usage of Pulse Nova, it is added into availableSkills and its name is added into actionList."							ifTrue: [ availableSkills := availableSkills copyWith: pulseNova.										actionList := actionList copyWith: 'Use Pulse Nova (activate)'.							].			].]		"// END OF ifTrue (player isMemberOf: Leshrac) //"ifFalse: [ "For Heroes (player) other than Leshrac, this code block is executed."				"The loop below traverses the active skill array of player. Skills which are NOT in cooldown AND of which mana usage value is NOT greater than the current MP of player is added into availableSkills. Current cooldown values of skills which are IN cooldown is decreased by 1."				activeSkills do: [ :skill | (skill getCurCooldown = 0)												ifTrue: [ (player getCurMP >= skill getManaUsage)																ifTrue: [ availableSkills := availableSkills copyWith: skill.																			actionList := actionList copyWith: ('Use ' , (skill getSkillName))																].												]												ifFalse: [ skill setCurCooldown: ((skill getCurCooldown) - 1). ].			].]."If player has any Health Potions, an action to use Health Potion is added into actionList."(player getRemHPot > 0)ifTrue: [ actionList := actionList copyWith: 'Use Health Potion' ]."If player has any Mana Potions, an action to use Mana Potion is added into actionList."(player getRemMPot > 0)ifTrue: [ actionList := actionList copyWith: 'Use Mana Potion' ].curActionIndex := UIManager default chooseFrom: actionList message: (player getHeroName , ':  Choose an action.').(curActionIndex = 1)		"There is always 'Attack' at the first index of actionList."ifTrue: [ givenDamage := player getAttackDamage.			Transcript show: 'Attack damage of ' , (player getHeroName) , ': ' , (givenDamage asString) ; cr.			actualDamage := enemy getActualAttackDamage: givenDamage.			self updateCurHPOf: enemy delta: (-1 * actualDamage).]ifFalse: [ ((actionList at: curActionIndex) = 'Use Health Potion')								"If the chosen action is using a Health Potion..."				ifTrue: [ player setRemHPot: (player getRemHPot - 1).							self updateCurHPOf: player delta: 300.							^ 'Use Health Potion'.		"Returns this string as the last action of player if the chosen action is using a Health Potion."				]				ifFalse: [ ((actionList at: curActionIndex) = 'Use Mana Potion')																"If the chosen action is using a Mana Potion..."								ifTrue: [ player setRemMPot: ((player getRemMPot) - 1).											self updateCurMPOf: player delta: 300. 											^ 'Use Mana Potion'.		"Returns this string as the last action of player if the chosen action is using a Mana Potion."								]								ifFalse: [ ((actionList at: curActionIndex) = 'Deactivate Pulse Nova')												"If the chosen action is deactivating Pulse Nova..."												ifTrue: [ (isSplitEarthDecreased)		"restoring the current cooldown value of the active skill Split Earth if it is decreased by 1 at the turn Leshrac deactivated the active skill Pulse Nova. (deactivating the active skill Pulse Nova does NOT waste the turn)"															ifTrue: [ splitEarth setCurCooldown: ((splitEarth getCurCooldown) + 1) ].																														pulseNova setIsActivated: false.															^ 'Pulse Nova (deactivate)'.		"Returns this string as the last action of player if the chosen action is deactivating Pulse Nova."												].																								"If the program reaches this point, it means that player chose to use an active skill."												"When active skills appear in actionList, they are always stored after the first element which is always 'Attack'."												"Hence, the corresponding Skill object for the action which is at index i in actionList can be found at the index (i-1) in availableSkills."												curSkill := availableSkills at: (curActionIndex-1).												actualDamage := self useActiveSkill: curSkill player: player enemy: enemy.								].				].]."IF THE PROGRAM REACHES THIS POINT, IT MEANS PLAYER EITHER CHOSE 'ATTACK' OR USED AN ACTIVE SKILL." (curActionIndex = 1)		"If the chosen action is 'Attack'. (There is always 'Attack' at the first index of actionList.)"ifTrue: [ Transcript show: 'Actual attack damage given to ' , (enemy getHeroName) , ': ' , (actualDamage asString) ; cr.						(player isMemberOf: SkeletonKing)			ifTrue: [ (actualDamage > 0)			"Below is the passive skill  Vampiric Aura  "						ifTrue: [ Transcript show: 'Skeleton King healed itself with 15% of ' , (actualDamage asString) , ' thanks to the passive skill Vampiric Aura.' ; cr.									self updateCurHPOf: player delta: ((actualDamage * 0.15) rounded).	"Heals itself with the 15% of the given damage"						]			]			ifFalse: [ (player isMemberOf: Magina )		"Below is the passive skill  Mana Break  "						ifTrue: [ Transcript show: 'Current MP of ' , (enemy getHeroName) , ' decreased by 100 because of the passive skill Mana Break of Magina.' ; cr.									self updateCurMPOf: enemy delta: -100.			"Decrease 100 Mana per attack"						]			].							^ 'Attack'.		"Returns this string as the last action of player if the chosen action is attacking."].					^ (curSkill getSkillName).		"Returns the name of the active skill used as the last action of player if the chosen action is using an active skill."! !!GameArena class methodsFor: 'user interaction' stamp: 'CemalBurakAygun 5/19/2017 15:24'!selectHeroFromSentinel	"Asks the user to select a hero from Sentinel and returns a corresponding Hero instance."	"Returns: None"| heroIndex |heroIndex := UIManager default chooseFrom: #('Earth Shaker' 'Magina' 'Mirana' 'Ogre Magi' 'Rylai' 'Sven') message: 'Player2: Choose a Sentinel hero.'.(heroIndex = 1)   ifTrue: [ ^ Earthshaker new ].(heroIndex = 2)   ifTrue: [ ^ Magina new ].(heroIndex = 3)   ifTrue: [ ^ Mirana new ].(heroIndex = 4)   ifTrue: [ ^ OgreMagi new ].(heroIndex = 5)   ifTrue: [ ^ Rylai new ].^ Sven new.			"If heroIndex = 6"! !!GameArena class methodsFor: 'user interaction' stamp: 'CemalBurakAygun 5/19/2017 23:02'!selectItemsFor: player enemy: enemy	"Asks the user to select items showing the list of items that player can buy with his/her current gold. Here is how this method works:"	"Firstly, it creates an array (allItems) that contains Item instances (one instance for each Item subclass) that are sorted in increasing order according to their cost."	"Then, it creates another array (itemNames) that contains strings. Those strings are in the form of '<ItemName> (cost: <ItemCost> gold)'. The ith element of itemNames corresponds to the ith element of allItems."	"Then, it executes a WHILE LOOP which loops as long as there is an empty slot for an item and the gold of player is equal to or greater than the cost of the cheapest item."	"At each iteration of that WHILE LOOP, a list of items that player can buy with his/her current gold is displayed. Then, the quantity variable of the item (in allItems) player choose  is increased by 1. Note: Potions are handled differently since they occupy 0.5 slot rather than 1 slot. The number of Health/Mana Potions are stored in the temporary variables HPNum and MPNum, respectively."	"Then, the values of remHPot and remMPot variables of player (Hero object) are set to the values of temporary variables HPNum and MPNum, respectively."	"Lastly, allItems is traversed and the items that player bought (the quantity of which is greater than 0) are processed by calling corresponding methods of GameArena class."	"In addition, the remaining gold of player and names of items player buys is printed on Transcript after each item selection."	"Expected Parameter Types: player (Hero object)   ,   enemy (Hero object)"	"Returns: None"| allItems itemNames remSlot HPNum MPNum curItemIndex costOfCheapestItem ind |"Items are sorted in increasing order according to their cost."allItems := { HealthPotion new . ManaPotion new . EnergyBooster new . VitalityBooster new . HoodOfDefiance new . Vanguard new . Desolator new . BattleFury new . Daedalus new . Butterfly new . HeartOfTarrasque new }.itemNames := Array new: (allItems size).1 to: (allItems size) do: [ :x | itemNames at: x put: ((allItems at: x) getItemName) , ' (cost: ' , ((allItems at: x) getCost asString) , ' gold)' ]."itemNames := #( 'Health Potion (cost: 200 gold)' 'Mana Potion (cost: 200 gold)' 'Energy Booster (cost: 1100 gold)' 'Viality Booster (cost: 1200 gold)' 'Hood of Defiance (cost: 2000 gold)' 'Vanguard (cost: 2500 gold)' 'Desolator (cost: 4000 gold)' 'Battle Fury (cost: 4500 gold)' 'Daedalus (cost: 5500 gold)' 'Butterfly (cost: 5500 gold)' 'Heart of Tarrasque (cost: 5600 gold)' )."remSlot := 4.0.		"The number of remaining slots."HPNum := 0.		"The number of Health Potion player has bought so far."MPNum := 0.		"The number of Mana Potion player has bought so far."costOfCheapestItem := (allItems at: 1) getCost.		"The cheapest item is stored at the first index of allItems."Transcript show: 'Note: A potion occupies half of a slot and there CANNOT be 2 different kinds of potions in the same slot!!' ; cr.ind := allItems size.		"At the beginning, ind points to the most expensive item in allItems (which is stored at the last index)."[ remSlot > 0 & (player getGold >= costOfCheapestItem) ]whileTrue: [ Transcript show: 'Remaining GOLD: ' , (player getGold asString) ; cr.								(remSlot <= 1 & (HPNum odd | MPNum odd))				"If the remaining slot <= 1 AND the number of Health Potions or the number of Mana Potions player has bought so far is odd, then there are slots for potions only."				ifTrue: [ 														(HPNum odd & MPNum odd)							"If the remaining slot <= 1 AND the number of both potions player bought so far is odd, then there are slots for exactly 1 Health Potion and 1 Mana Potion."							ifTrue: [ curItemIndex := UIManager default chooseFrom: #('Health Potion' 'Mana Potion') message: (player getHeroName , ' (GOLD=' , player getGold asString , ') (SLOT=0.5+0.5)' ).										(curItemIndex = 1)										ifTrue: [ HPNum := HPNum + 1.     player setGold: (player getGold - (allItems at: 1) getCost).     Transcript show: 'Bought: Health Potion. '. ]										ifFalse: [ MPNum := MPNum + 1.     player setGold: (player getGold - (allItems at: 2) getCost).     Transcript show: 'Bought: Mana Potion. '. ].										remSlot := 0.5.							]							ifFalse: [ (HPNum odd)																				"If the remaining slot <= 1 AND only the number of Health Potion is odd, then there is a slot for only 1 Health Potion."										ifTrue: [ UIManager default chooseFrom: #('Health Potion') message: ( player getHeroName , ' (GOLD=' , player getGold asString , ') (SLOT=0.5)' ).													HPNum := HPNum + 1. 													player setGold: ((player getGold) - ((allItems at: 1) getCost)).													Transcript show: 'Bought: Health Potion. '.										]																				"If the remaining slot <= 1 AND only the number of Mana Potion is odd, then there is a slot for only 1 Mana Potion."										ifFalse: [ UIManager default chooseFrom: #('Mana Potion') message: ( player getHeroName , ' (GOLD=' , player getGold asString , ') (SLOT=0.5)' ).													MPNum := MPNum + 1.													player setGold: ((player getGold) - ((allItems at: 2) getCost)).													Transcript show: 'Bought: Mana Potion. '.										].																				remSlot := 0.							]		"// END OF ifFalse (HPNum odd & MPNum odd) //"				]		"// END OF ifTrue (remSlot <= 1 & (HPNum odd | MPNum odd)) //"								ifFalse: [   														"ind begins from the last index (most expensive item) of allItems and goes to the left (cheaper items) as long as the current gold of the player is less than the cost of the item at index ind in allItems."							[ (player getGold < (allItems at: ind) getCost) ]							whileTrue: [ ind := ind-1 ]. 								 							curItemIndex := UIManager default chooseFrom: (itemNames copyFrom: 1 to: ind) message: (player getHeroName , ' (GOLD=' , player getGold asString , ') (SLOT=' , (remSlot asString) , ')' ).												(curItemIndex = 1)							ifTrue: [ HPNum := HPNum + 1.     remSlot := remSlot - 0.5. ]							ifFalse:[ (curItemIndex = 2)										ifTrue: [ MPNum := MPNum + 1.     remSlot := remSlot - 0.5. ]										ifFalse: [ (allItems at: curItemIndex) setQuantity: ((allItems at: curItemIndex) getQuantity + 1).														remSlot := remSlot - 1.										].							].													player setGold: ((player getGold) - ( (allItems at: curItemIndex) getCost)).							Transcript show: 'Bought: ' , (allItems at: curItemIndex) getItemName , '. '.				]		"// END OF ifFalse (remSlot <= 1 & (HPNum odd | MPNum odd)) //"].		"//END OF WHILE LOOP//"Transcript show: 'Remaining GOLD: ' , (player getGold asString) ; cr ; cr.player setRemHPot: HPNum.player setRemMPot: MPNum."The loop below traverses allItems and calls corresponding methods to apply the effects of items that player bought (the quantity of which is greater than 0)."allItems do: [ :item | (item getQuantity > 0)								ifTrue: [ (item isMemberOf: EnergyBooster)											ifTrue: [ self useEnergyBoosterOn: player quantity: (item getQuantity) ]											ifFalse: [ (item isMemberOf: VitalityBooster)														ifTrue: [ self useVitalityBoosterOn: player quantity: (item getQuantity) ]														ifFalse: [ (item isMemberOf: HoodOfDefiance)																	ifTrue: [ self useHoodOfDefianceOn: player quantity: (item getQuantity) ]																	ifFalse: [ (item isMemberOf: Vanguard)																				ifTrue: [ self useVanguardOn: player quantity: (item getQuantity) ]																				ifFalse: [ (item isMemberOf: Desolator)																							ifTrue: [ self useDesolatorOn: player quantity: (item getQuantity) enemy: enemy ]																							ifFalse: [ (item isMemberOf: BattleFury)																										ifTrue: [ self useBattleFuryOn: player quantity: (item getQuantity) ]																										ifFalse: [ (item isMemberOf: Daedalus)																													ifTrue: [ self useDaedalusOn: player quantity: (item getQuantity) ]																															ifFalse: [ (item isMemberOf: Butterfly)																																ifTrue: [ self useButterflyOn: player quantity: (item getQuantity) ]																																ifFalse: [ self useHeartOfTarrasqueOn: player quantity: (item getQuantity) ]																													]																										]																							]																				]																	]														]											]								]].! !!GameArena class methodsFor: 'user interaction' stamp: 'CemalBurakAygun 5/19/2017 17:21'!selectHeroFromScourge		"Asks the user to select a hero from Scourge and returns a corresponding Hero instance."	"Returns: None"| heroIndex |heroIndex := UIManager default chooseFrom: #('Leshrac' 'Lion' 'Mortred' 'Nyx Assassin' 'Skeleton King' 'Tidehunter') message: 'Player1: Choose a Scourge hero.'.(heroIndex = 1)   ifTrue: [ ^ Leshrac new ].	(heroIndex = 2)   ifTrue: [ ^ Lion new ].(heroIndex = 3)   ifTrue: [ ^ Mortred new ].(heroIndex = 4)   ifTrue: [ ^ NyxAssassin new ].(heroIndex = 5)   ifTrue: [ ^ SkeletonKing new ].^ Tidehunter new.			"If heroIndex = 6"! !!GameArena class methodsFor: 'skills' stamp: 'CemalBurakAygun 5/20/2017 13:55'!useActiveSkill: skll player: player enemy: enemy	"Puts the active skill skll into cooldown."	"Updates the current MP of player using skll. This method assumes that the current MP of player is not less than the mana usage value of skll."	"Applies the effects of skll on player and enemy and prints these effects on Transcript."	"Expected Parameter Types: skll (Skill object)   ,   player (Hero object)   ,   enemy (Hero object)"	"Returns: The actual skill damage given to enemy. (nonnegative integer)"| givenDamage actualDamage missingMana |skll setCurCooldown: (skll getMaxCooldown).player setCurMP: (player getCurMP - skll getManaUsage).		"Assumes that the current MP of player is not less than the mana usage value of skll."		givenDamage := skll getDamage.actualDamage := 0.(skll isMemberOf: AnchorSmash)ifTrue: [ player setIsEffectOfAnchorSmashValid: true.		"The effect of Anchor Smash: Descrease enemy attack 60% for 1 turn."			Transcript show: (player getHeroName) , ' got decrease enemy attack 60% for 1 turn thanks to the active skill Anchor Smash.' ; cr.]ifFalse: [ (skll isMemberOf: GodsStrength)				ifTrue: [ player setEffectOfGodsStrength: 4. 		"The effect of God's Strength: x2 damage for 3 turns. (For my program to work properly, I need to set it to 3+1=4)"							Transcript show: (player getHeroName) , ' got x2 attack damage for 3 turns thanks to the active skill God''s Strength.' ; cr.				]				ifFalse: [ (skll isMemberOf: EnchantTotem)								ifTrue: [ player setIsEffectOfEnchantTotemValid: true.		"The effect of Enchant Totem: x4 damage for the next attack."											Transcript show: (player getHeroName) , ' got x4 damage for the next attack thanks to the active skill Enchant Totem.' ; cr.								]								ifFalse: [ (skll isMemberOf: ManaBurn)											ifTrue: [ enemy setCurMP: (enemy getCurMP * 0.8) rounded.		"Decrease 20% of the enemy Mana."														Transcript show: 'Current MP of ' , (enemy getHeroName) , ' decreased by 20% to: ' , (enemy getCurMP asString) , ' because of the active skill Mana Burn' ; cr.																							]											ifFalse: [ (skll isMemberOf: ManaVoid)														ifTrue: [ missingMana := (enemy getMaxMP - enemy getCurMP).																	givenDamage := (1.1 * missingMana) rounded ]			"1.1 x (enemy missing mana) as damage"														ifFalse: [ (skll isMemberOf: PulseNova)																				ifTrue: [ skll setIsActivated: true. ]		"Activate Pulse Nova. (Its damage for this turn will be applied below.)"														]											]								]				]].(givenDamage > 0)ifTrue: [ Transcript show: 'Skill damage of ' , (player getHeroName) , ': ' , (givenDamage asString) , ' (' , (skll getSkillName) , ')' ; cr.						actualDamage := enemy getActualSkillDamage: givenDamage.			(actualDamage > 0)			ifTrue: [ self updateCurHPOf: enemy delta: (-1 * actualDamage) ].						Transcript show: 'Actual skill damage given to ' , (enemy getHeroName) , ': ' , (actualDamage asString) ; cr.].^ actualDamage.		"Returns the actual skill damage given to enemy."! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/19/2017 20:45'!useEnergyBoosterOn: player quantity: quantity	"Applies the effects of the item Energy Booster (quantity of them) on player and enemy and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"	| newMaxMP |newMaxMP := (quantity * 250 + (player getMaxMP)).		"increase max mana by 250 (for 1 Energy Booster)"player setMaxMP: newMaxMP.player setCurMP: newMaxMP.Transcript show: '# Effects of Energy Booster (x' , (quantity asString) , '):' ; cr.Transcript show: '   Maximum (and current) MP of ' , (player getHeroName) , ' increased by ' , ((quantity * 250) asString) , ' to: ' , (newMaxMP asString) ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/19/2017 20:46'!useHeartOfTarrasqueOn: player quantity: quantity	"Applies the effects of the item Heart of Tarrasque (quantity of them) on player and enemy and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"| newMaxHP |newMaxHP := (quantity * 250 + (player getMaxHP)).		"+250 max HP (for 1 Heart of Tarrasque)"player setMaxHP: newMaxHP.player setCurHP: newMaxHP.player setIncHPEachTurnPerc: (quantity * 7 + player getIncHPEachTurnPerc).		"increase current HP by %7 at each turn (for 1 Heart of Tarrasque)"		Transcript show: '# Effects of Heart of Tarrasque (x' , (quantity asString) , '):' ; cr.Transcript show: '   Maximum (and current) HP of ' , (player getHeroName) , ' increased by ' , ((quantity * 250) asString) , ' to: ' , (newMaxHP asString) ; cr.Transcript show: '   Current HP of ' , (player getHeroName) , ' will increase by ' , ((quantity * 7) asString) , '% at each turn.' ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/19/2017 20:45'!useBattleFuryOn: player quantity: quantity	"Applies the effects of the item Battle Fury (quantity of them) on player and prints these effects on Transcript."		"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"| minDamage maxDamage |minDamage := (player getAttackRange) at: 1.			"The first element is the lower limit of the attack damage."maxDamage := (player getAttackRange) at: 2.		"The second element is the upper limit of the attack damage."player setAttackRange: { (quantity * 55 + minDamage) . (quantity * 55 + maxDamage) }.		"+55 damage (for 1 Battle Fury)"	player setIncMPEachTurnDelta: (player getIncMPEachTurnDelta + (quantity * 50)).		"+50 mana (for 1 Battle Fury) at each turn"		Transcript show: '# Effects of Battle Fury (x' , (quantity asString) , '):' ; cr.Transcript show: '   +' , ((quantity * 55) asString) , ' damage for ' , (player getHeroName) ; cr.Transcript show: '   Current MP of ' , (player getHeroName) , ' will increase by ' , ((quantity * 50) asString) , ' at each turn.' ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/19/2017 20:46'!useVitalityBoosterOn: player quantity: quantity	"Applies the effects of the item Vitality Booster (quantity of it) on player and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"| newMaxHP |newMaxHP := (quantity * 250 + (player getMaxHP)).		"increase max HP by 250 (for 1 Vitality Booster)"player setMaxHP: newMaxHP.player setCurHP: newMaxHP.Transcript show: '# Effects of Vitality Booster (x' , (quantity asString) , '):' ; cr.Transcript show: '   Maximum (and current) HP of ' , (player getHeroName) , ' increased by ' , ((quantity * 250) asString) , ' to: ' , (newMaxHP asString) ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/20/2017 13:49'!useVanguardOn: player quantity: quantity	"Applies the effects of the item Vanguard (quantity of them) on player and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"| newMaxHP decReceivedDamageBy60Chance |newMaxHP := (quantity * 250 + (player getMaxHP)).		"+250 max HP (for 1 Vanguard)"player setMaxHP: newMaxHP.player setCurHP: newMaxHP.decReceivedDamageBy60Chance := 20.			"20% chance of decreasing the received damage by 60 (for 1 Vanguard)"2 to: quantity do: [ :n | decReceivedDamageBy60Chance := decReceivedDamageBy60Chance + (20/n) ].		"Calculation of the percentage of chance of decreasing the received damage by 60 for quantity of Vanguard items."player setDecReceivedDamageBy60Chance: (player getDecReceivedDamageBy60Chance + (decReceivedDamageBy60Chance roundTo: 0.01)).Transcript show: '# Effects of Vanguard (x' , (quantity asString) , '):' ; cr.Transcript show: '   Maximum (and current) HP of ' , (player getHeroName) , ' increased by ' , ((quantity * 250) asString) , ' to: ' , (newMaxHP asString) ; cr.Transcript show: '   +' , (decReceivedDamageBy60Chance roundTo: 0.01) asString , '% chance of decreasing the received damage by 60 for ' , (player getHeroName) ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/20/2017 13:49'!useButterflyOn: player quantity: quantity	"Applies the effects of the item Butterfly (quantity of them) on player and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"| minDamage maxDamage evasionChance |minDamage := (player getAttackRange) at: 1.			"The first element is the lower limit of the attack damage."maxDamage := (player getAttackRange) at: 2.		"The second element is the upper limit of the attack damage."player setAttackRange: { (quantity * 30 + minDamage) . (quantity * 30 + maxDamage) }.		"+30 damage (for 1 Butterfly)"evasionChance := 25.		"25% chance of evasion (for 1 Butterfly)"2 to: quantity do: [ :n | evasionChance := evasionChance + (25/n) ].		"Calculation of the percentage of chance of evasion for quantity of Butterfly items."player setEvasionChance: (player getEvasionChance + (evasionChance roundTo: 0.01)).Transcript show: '# Effects of Butterfly (x' , (quantity asString) , '):' ; cr.Transcript show: '   +' , ((quantity * 30) asString) , ' damage for ' , (player getHeroName) ; cr.Transcript show: '   +' , (evasionChance roundTo: 0.01) asString , '% chance of evasion for ' , (player getHeroName) ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/20/2017 13:49'!useDaedalusOn: player quantity: quantity	"Applies the effects of the item Daedalus (quantity of them) on player and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"| minDamage maxDamage x2DamageChance |minDamage := (player getAttackRange) at: 1.			"The first element is the lower limit of the attack damage."maxDamage := (player getAttackRange) at: 2.		"The second element is the upper limit of the attack damage."player setAttackRange: { (quantity * 75 + minDamage) . (quantity * 75 + maxDamage) }.		"+75 damage (for 1 Daedalus)"	x2DamageChance := 25.		"25% chance of x2 damage (for 1 Daedalus)"2 to: quantity do: [ :n | x2DamageChance := x2DamageChance + (25/n) ].		"Calculation of the percentage of chance of x2 damage for quantity of Daedalus items."player setX2DamageFromItemChance: (player getX2DamageFromItemChance + (x2DamageChance roundTo: 0.01)).Transcript show: '# Effects of Daedalus (x' , (quantity asString) , '):' ; cr.Transcript show: '   +' , ((quantity * 75) asString) , ' damage for ' , (player getHeroName) ; cr.Transcript show: '   +' , (x2DamageChance roundTo: 0.01) asString , '% chance of x2 damage for ' , (player getHeroName) ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/19/2017 20:45'!useDesolatorOn: player quantity: quantity enemy: enemy	"Applies the effects of the item Desolator (quantity of them) on player and enemy and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)   ,   enemy (Hero object)"	"Returns: None"| minDamage maxDamage newArmor |minDamage := (player getAttackRange) at: 1.			"The first element is the lower limit of the attack damage."maxDamage := (player getAttackRange) at: 2.		"The second element is the upper limit of the attack damage."player setAttackRange: { (quantity * 50 + minDamage) . (quantity * 50 + maxDamage) }.		"+50 damage (for 1 Desolator)"newArmor := ((enemy getArmor) - (quantity * 5)).		"decrease enemy armor by 5 (for 1 Desolator)"(newArmor < 0)ifTrue: [ enemy setArmor: 0 ]					"makes sure the value of enemy armor is not smaller than 0"ifFalse: [ enemy setArmor: newArmor ].Transcript show: '# Effects of Desolator (x' , (quantity asString) , '):' ; cr.Transcript show: '   +' , ((quantity * 50) asString) , ' damage for ' , (player getHeroName) ; cr.Transcript show: '   The armor of ' , (enemy getHeroName) , ' decreaed by ' , ((quantity * 5) asString) , ' to: ' , (newArmor asString) ; cr.! !!GameArena class methodsFor: 'items' stamp: 'CemalBurakAygun 5/20/2017 13:50'!useHoodOfDefianceOn: player quantity: quantity	"Applies the effects of the item Hood of Defiance (quantity of them) on player and prints these effects on Transcript."	"Expected Parameter Types: player (Hero object)   ,   quantity (nonnegative integer)"	"Returns: None"| decSkillDamageTakenPerc |decSkillDamageTakenPerc := 25.		"decrease 25% of the skill damage taken (for 1 Hood of Defiance)"2 to: quantity do: [ :n | decSkillDamageTakenPerc := decSkillDamageTakenPerc + (25/n) ].		"Calculation of the percentage by which skill damage taken will be decreaed for quantity of Hood of Defiance items."player setDecSkillDamageTakenPerc: (player getDecSkillDamageTakenPerc + (decSkillDamageTakenPerc roundTo: 0.01)).Transcript show: '# Effects of Hood of Defiance (x' , (quantity asString) , '):' ; cr.Transcript show: '   +' , (decSkillDamageTakenPerc roundTo: 0.01) asString , '% by which the skill damage taken will be decreaed for ' , (player getHeroName) ; cr.! !!GameArena class methodsFor: 'playing' stamp: 'CemalBurakAygun 5/20/2017 12:57'!start	"This is the main method of the game. The game is started by calling this method."	"This method is responsible for the followings:"	"Opening and clearing Transcript."	"Calling other methods of GameArena in proper order for a smooth gameplay."	"Maintaining the turn-basedness of the game."	"Printing some information along on Transcript along the game."	"Printing the name of the winner Hero (player) when the game ends."		"Returns: None."| player1 player2 curPlayer whoseTurn lastActOfPlayer1 lastActOfPlayer2 |Transcript open ; clear ; show: '2017 SPRING CMPE260 PROJECT 3' ; cr ; show: 'Cemal Burak Aygün   2014400072' ; cr ; cr.player1 := self selectHeroFromScourge.player2 := self selectHeroFromSentinel.Transcript cr ; cr ; show: 'Buying items for Player1 (' , player1 getHeroName , '):' ; cr.self selectItemsFor: player1 enemy: player2.Transcript cr ; cr ; show: 'Buying items for Player2 (' , player2 getHeroName , '):' ; cr.self selectItemsFor: player2 enemy: player1.lastActOfPlayer1 := 'None'.lastActOfPlayer2 := 'None'.curPlayer := player1.	whoseTurn := 'Player1'."WHILE LOOP below is executed as long as both of the Heroes (players) are alive."[ (player1 getCurHP > 0) & (player2 getCurHP > 0) ]whileTrue: [ 					Transcript cr ; cr ; show: '- - - - - - - - - - - - - - - - - - - -' ; cr ; cr.					Transcript cr ; show: (whoseTurn , '''s Turn!!') ; cr.					(lastActOfPlayer1 = 'Pulse Nova (deactivate)')					"Since deactivating Pulse Nova does not waste the turn, the code block below is executed only if the last action of Leshrac is NOT deactivating Pulse Nova."					ifFalse: [ 	(curPlayer getIncHPEachTurnPerc > 0)															"Below is the effect (inrease current HP by 7% at each turn) of the item Heart of Tarrasque."									ifTrue: [ self updateCurHPOf: curPlayer delta: ((curPlayer getCurHP * curPlayer getIncHPEachTurnPerc / 100) rounded).												Transcript show: 'Current HP of ' , (curPlayer getHeroName) , ' increased ' , (curPlayer getIncHPEachTurnPerc asString) , '% thanks to the item Heart of Tarrasque.' ; cr.									].									(curPlayer getIncMPEachTurnDelta > 0)									"Below is the effect (+50 Mana at each turn) of the item Battle Fury."									ifTrue: [ self updateCurMPOf: curPlayer delta: (curPlayer getIncMPEachTurnDelta).												Transcript show: 'Current MP of ' , (curPlayer getHeroName) , ' increased by ' , (curPlayer getIncMPEachTurnDelta asString) , ' thanks to the item Battle Fury.' ; cr.									].									(curPlayer isMemberOf: Leshrac)									ifTrue: [ (((curPlayer getActiveSkills) at: 2) getIsActivated)												"Below is the effect (+50 spell damage , 150 mana usage) of the activated Pulse Nova."												ifTrue: [ ((curPlayer getCurMP) >= (((curPlayer getActiveSkills) at: 2) getManaUsage))															ifTrue: [ self useActiveSkill: ((curPlayer getActiveSkills) at: 2) player: curPlayer enemy: player2.																		Transcript show: 'Current MP of Leshrac decreased by ' , (((curPlayer getActiveSkills) at: 2) getManaUsage asString) , ' because of Pulse Nova.' ; cr.															]															ifFalse: [ Transcript show: 'The effects of Pulse Nova cannot be applied because of the current MP of Leshrac is not enough. (Pulse Nova stays activated.)' ; cr. ]												]									].					].					(curPlayer isMemberOf: Tidehunter)					ifTrue: [ (curPlayer getIsEffectOfAnchorSmashValid)								"Below is the termination of the effect (decrease enemy attack 60% for 1 turn) of the active skill Anchor Smash which is used at the previous turn."								ifTrue: [ curPlayer setIsEffectOfAnchorSmashValid: false ]					]										ifFalse: [ (curPlayer isMemberOf: Earthshaker)   									ifTrue: [ (lastActOfPlayer2 = 'Attack')													ifTrue: [ (curPlayer getIsEffectOfEnchantTotemValid)																"Below is the termination of the effect (x4 damage for the next attack) of the active skill Enchant Totem which is used at one of the previous turns."																ifTrue: [ curPlayer setIsEffectOfEnchantTotemValid: false. ].													].									]									ifFalse: [ (curPlayer isMemberOf: Sven)   													ifTrue: [ (curPlayer getEffectOfGodsStrength > 0)																"Below is the decrementation of the turn number for the effect (x2 damage for 3 turn) of the active skill God's Strength which is used at one the previous turns. "																ifTrue: [ curPlayer setEffectOfGodsStrength: (curPlayer getEffectOfGodsStrength - 1) ].													].									].					].					Transcript cr ; show: 'Player1' ; cr.					self printInformationFor: player1 lastAction: lastActOfPlayer1.					Transcript cr ; show: 'Player2' ; cr.					self printInformationFor: player2 lastAction: lastActOfPlayer2.										Transcript cr.					(curPlayer = player1)					ifTrue: [ lastActOfPlayer1 := self takeActionFor: player1 enemy: player2.								(lastActOfPlayer1 = 'Pulse Nova (deactivate)')								"Since deactivating Pulse Nova does not waste the turn, if the last action of Leshrac (player1) IS deactivating Pulse Nova, current player does NOT switch to player2."								ifFalse: [ curPlayer := player2.   whoseTurn := 'Player2'. ]					]					ifFalse: [ lastActOfPlayer2 := self takeActionFor: player2 enemy: player1.								curPlayer := player1.   whoseTurn := 'Player1'.	"Switches current player to player1 after player2 takes an action."					].									].		"//END OF WHILE LOOP//"Transcript cr ; cr ; show: '- - - - - - - - - - - - - - - - - - - -' ; cr ; cr ; cr.Transcript show: '## END OF THE GAME ##' ; cr.Transcript cr ; show: 'Player1' ; cr.self printInformationFor: player1 lastAction: lastActOfPlayer1.Transcript cr ; show: 'Player2' ; cr.self printInformationFor: player2 lastAction: lastActOfPlayer2.(player1 getCurHP = 0)ifTrue: [ Transcript cr ; cr ; cr ; show: ('!!!!!! WINNER OF THE GAME IS:   PLAYER2 (' , player2 getHeroName , ') !!!!!!') ]ifFalse: [ Transcript cr ; cr ; cr ; show: ('!!!!!! WINNER OF THE GAME IS:   PLAYER1 (' , player1 getHeroName , ') !!!!!!') ].! !!GameArena class methodsFor: 'playing' stamp: 'CemalBurakAygun 5/19/2017 17:21'!printInformationFor: player lastAction: lastAct	"Prints information about player on Transcript. Information template is as follows:"	"Hero: <HeroName>"	"HP: <CurrentHP> / <MaximumHP>"	"MP: <CurrentMP> / <MaximumMP>"	"Last Action: lastAct"	"Remaining Potions: <HealthPotionNumber> Health , <ManaPotionNumber> Mana"	"Skills in Cooldown: <SkilName1> (not available <TurnNumber> turns)   <SkilName2> (not available <TurnNumber> turns)   ..."	"Expected Parameter Types: player (Hero object)   ,   lastAct (string)"	"Returns: None"| activeSkills skillsInCooldownText |activeSkills := player getActiveSkills.skillsInCooldownText := ''.		"This is the string that will store information about the skills which are in cooldown.""The loop below traverses the active skill array of player and for skills of which current cooldown is not 0, updates skillsInCooldownText variable. "activeSkills do: [ :skill | (skill getCurCooldown > 0)								ifTrue: [ skillsInCooldownText := skillsInCooldownText , (skill getSkillName) , ' (not available ' , (skill getCurCooldown asString) , ' turns)   '  ]].(skillsInCooldownText size = 0)ifTrue: [ skillsInCooldownText := 'None' ].		"If no skill is found in cooldown, prints 'None'."	Transcript show: ('Hero: ' ,  (player getHeroName)) ; cr.Transcript show: ('HP: ' , (player getCurHP asString) , ' / ' , (player getMaxHP asString)) ; cr.Transcript show: ('MP: ' , (player getCurMP asString) , ' / ' , (player getMaxMP asString)) ; cr.Transcript show: ('Last Action: ' , lastAct) ; cr.Transcript show: ('Remaining Potions: ' , (player getRemHPot asString) , ' Health , ' , (player getRemMPot asString) , ' Mana') ; cr.Transcript show: ('Skills in Cooldown: ' , skillsInCooldownText) ; cr.! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 17:38'!updateCurHPOf: player delta: deltaHP	"Calculates a new current HP for player by adding deltaHP to his/her current HP and updates the current HP of him/her with the new value."	"Also, makes sure that new current HP is not bigger than the maximum HP of player or smaller than 0."	"Expected Parameter Types: player (Hero object)   ,   deltaHP (integer)"	"Returns: None"| newCurHP maxHP |maxHP := player getMaxHP.newCurHP := (player getCurHP) + deltaHP.(newCurHP < 0)ifTrue: [ player setCurHP: 0 ]			"If (current HP of player)+deltaHP is smaller than 0, new current HP is 0."ifFalse: [ (newCurHP > maxHP)				ifTrue: [ player setCurHP: maxHP ]		"If (current HP of player)+deltaHP exceeds maxHP, new current HP is equal to maxHP."				ifFalse: [ player setCurHP: newCurHP ]	"If new current HP is in the range [0 , maxHP], this line of code is executed."].! !!GameArena class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 17:40'!updateCurMPOf: player delta: deltaMP	"Calculates a new current MP for player by adding deltaMP to his/her current MP and updates the current MP of him/her with the new value."	"Also, makes sure that new current MP is not bigger than the maximum MP of player or smaller than 0."	"Expected Parameter Types: player (Hero object)   ,   deltaMP (integer)"	"Returns: None"| newCurMP maxMP |maxMP := player getMaxMP.newCurMP := (player getCurMP) + deltaMP.(newCurMP < 0)ifTrue: [ player setCurMP: 0 ]			"If (current MP of player)+deltaMP is smaller than 0, new current MP is 0."ifFalse: [ (newCurMP > maxMP)				ifTrue: [ player setCurMP: maxMP ]		"If (current MP of player)+deltaMP exceeds maxMP, new current MP is equal to maxMP."				ifFalse: [ player setCurMP: newCurMP ]	"If new current MP is in the range [0 , maxMP], this line of code is executed."].! !Dota subclass: #Hero	instanceVariableNames: 'heroName maxHP curHP maxMP curMP gold activeSkills armor attackRange remHPot remMPot evasionChance x2DamageFromItemChance decReceivedDamageBy60Chance decSkillDamageTakenPerc incHPEachTurnPerc incMPEachTurnDelta'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Hero commentStamp: 'CemalBurakAygun 5/20/2017 12:04' prior: 0!Representation of a Hero (generic).	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>	heroName 	(string)		Name of the hero.		maxHP 		(nonnegative integer)		Maximum Health Point of the hero.		curHP 		(nonnegative integer)			Current Health Point of the hero.		maxMP 		(nonnegative integer)			Maximum Mana Point of the hero.		curMP 		(nonnegative integer)			Current Mana Point of the hero.		gold 		(nonnegative integer)			The amount of gold hero has.		activeSkills 		(array of Skill objects)			An array which stores Skill objects that are the active skills of the hero.		armor 		(nonnegative integer)			The value of the armor of the hero.		attackRange 		(array of 2 nonnegative integers)			An array of 2; the first element is the lower limit of the attack and the second element is the upper limit of the attack.		remHPot 		(nonnegative integer)			The number of the remaining Health Potions hero has.		remMPot 		(nonnegative integer)			The number of the remaining Mana Potions hero has.		evasionChance 		(nonnegative float)			The percentage of chance of evasion hero has.	x2DamageFromItemChance 		(nonnegative float)			The percentage of chance of giving x2 attack damage. (the effect of the item Daedalus)		decReceivedDamageBy60Chance 		(nonnegative float)			The percentage of chance of decreasing received attack damage by 60. (the effect of the item Vanguard)		decSkillDamageTakenPerc 		(nonnegative float)			The percentage of decreasing the skill damage taken. (the effect of the item Hood of Defiance)		incHPEachTurnPerc 		(nonnegative float)			The percentage the current HP of the hero is increaed by at each turn. (the effect of the item Heart of Tarrasque)		incMPEachTurnDelta 		(nonnegative integer)			The amount the current MP of the hero is increased by at each turn. (the effect of the item Battle Fury)!!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:05'!getHeroName^ heroName.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:05'!getIncHPEachTurnPerc^ incHPEachTurnPerc.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:05'!getIncMPEachTurnDelta^ incMPEachTurnDelta.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:04'!getDecSkillDamageTakenPerc^ decSkillDamageTakenPerc.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:06'!getRemHPot^ remHPot.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 19:54'!getArmor^ armor.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/17/2017 17:14'!getActiveSkills^ activeSkills.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:05'!getMaxHP^ maxHP.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:06'!getMaxMP^ maxMP.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:06'!getRemMPot^ remMPot.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/17/2017 17:14'!getCurHP^ curHP.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 12:01'!getAttackRange^ attackRange.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 12:13'!getDecReceivedDamageBy60Chance^ decReceivedDamageBy60Chance.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 12:13'!getX2DamageFromItemChance^ x2DamageFromItemChance.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/17/2017 17:14'!getCurMP^ curMP.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 12:58'!getEvasionChance^ evasionChance.! !!Hero methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 20:05'!getGold^ gold.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setIncMPEachTurnDelta: aNonnegativeIntegerincMPEachTurnDelta := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setCurMP: aNonnegativeIntegercurMP := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setMaxHP: aNonnegativeIntegermaxHP := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setAttackRange: anArrayOfTwoNonnegativeIntegersattackRange := anArrayOfTwoNonnegativeIntegers.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:15'!setActiveSkills: anArrayOfSkillObjectsactiveSkills := anArrayOfSkillObjects.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:32'!setDecReceivedDamageBy60Chance: aNonnegativeFloatdecReceivedDamageBy60Chance := aNonnegativeFloat.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setMaxMP: aNonnegativeIntegermaxMP := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setCurHP: aNonnegativeIntegercurHP := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setGold: aNonnegativeIntegergold := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:32'!setDecSkillDamageTakenPerc: aNonnegativeFloatdecSkillDamageTakenPerc := aNonnegativeFloat.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:32'!setEvasionChance: aNonnegativeFloatevasionChance := aNonnegativeFloat.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setRemMPot: aNonnegativeIntegerremMPot := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:32'!setIncHPEachTurnPerc: aNonnegativeFloatincHPEachTurnPerc := aNonnegativeFloat.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:14'!setArmor: aNonnegativeIntegerarmor := aNonnegativeInteger.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:13'!setHeroName: aStringheroName := aString.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:32'!setX2DamageFromItemChance: aNonnegativeFloatx2DamageFromItemChance := aNonnegativeFloat.! !!Hero methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:16'!setRemHPot: aNonnegativeIntegerremHPot := aNonnegativeInteger.! !!Hero methodsFor: 'DamageCalculation' stamp: 'CemalBurakAygun 5/19/2017 21:45'!getActualAttackDamage: givenDamage	"Calculates the actual attack damage this Hero gets when the enemy gives the attack damage givenDamage."		"Expected Parameter Types: givenDamage (nonnegative integer)"	"Returns: Actual attack damage given to this Hero. (nonnegative integer)"| randObj randomNumber actualDamage |randObj := Random new.randomNumber := (randObj next) * 100.	"randomnumber is a float in the range [0 , 100)."(randomNumber < evasionChance)ifTrue: [ Transcript show: heroName , ' got lucky!! Evasion (' , (evasionChance asFloat asString) , '%) occured.' ; cr.				^ 0 		"If evasion occurs, actual attack damage is 0."].	actualDamage := ( givenDamage / (0.06*armor + 1) ) rounded.	"Calculation of the actual attack damage according to the given attack damage"	randomNumber := (randObj next) * 100.	"randomnumber is a float in the range [0 , 100)."(randomNumber < decReceivedDamageBy60Chance)		"The effect (decreasing received damage by 60) of the item Vanguard"ifTrue: [ Transcript show: 'Actual attack damage given to ' , heroName , ' was decreased by 60 thanks to the item Vanguard.' ; cr.				(actualDamage > 60)				ifTrue: [ ^ (actualDamage - 60) ].				^ 0.			"Makes sure that the actual attack damage is not less than 0."].^ actualDamage.		"If the effect of the item Vanguard does not occur, the actual attack damage remains the same."! !!Hero methodsFor: 'DamageCalculation' stamp: 'CemalBurakAygun 5/19/2017 23:24'!getAttackDamage	"Calculates the attack damage of this Hero."		"Returns: Attack damage of this Hero. (nonnegative integer)"| minDamage maxDamage randObj randomNumber attackDamage |minDamage := attackRange at: 1.		"The first element is the lower limit of the attack damage."maxDamage := attackRange at: 2.		"The second element is the upper limit of the attack damage."randObj := Random new.randomNumber :=	(randObj nextInt: (maxDamage - minDamage + 1)) - 1.	"randomNumber is an integer in the interval [0 , <theNumberOfPossibleAttackValues - 1>]."attackDamage := minDamage + randomNumber.		"attackDamage is an integer in the interval [minDamage , maxDamage]."	randomNumber := (randObj next) * 100.		"randomNumber is a float in the range [0 , 100)."(randomNumber < x2DamageFromItemChance)		"The effect (25% chance of x2 damage) of the item Daedalus."ifTrue: [ Transcript show: heroName , ' gave x2 attack damage thanks to the item Daedalus.' ; cr.				^ (attackDamage * 2)].^ attackDamage.		"If the effect of the item Daedalus does not occur, the attack damage remains the same."! !!Hero methodsFor: 'DamageCalculation' stamp: 'CemalBurakAygun 5/20/2017 13:24'!getActualSkillDamage: givenDamage	"Calculates the actual skill damage this Hero gets when the enemy gives the skill damage givenDamage."		"Expected Parameter Types: givenDamage (nonnegative integer)"	"Returns: Actual skill damage given to this Hero. (nonnegative integer)"(decSkillDamageTakenPerc > 0)			"The effect (decrease 25% of the skill damage taken) of the item Hood of Defiance"ifTrue: [ Transcript show: 'Actual skill damage given to ' , heroName , ' decreased by ' , (decSkillDamageTakenPerc asString) , '% thanks to the item Hood of Defiance.' ; cr.				^ (givenDamage * (1-(decSkillDamageTakenPerc/100))) rounded	.].^ givenDamage.		"If the effect of Hood of Defiance does not occur, the actual skill damage is equal to the given skill damage."! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Hero class	instanceVariableNames: ''!!Hero class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:58'!new| temp |temp := self basicNew.temp setGold: 11000.temp setRemHPot: 0.temp setRemMPot: 0.temp setIncHPEachTurnPerc: 0.temp setIncMPEachTurnDelta: 0.temp setEvasionChance: 0.temp setX2DamageFromItemChance: 0.temp setDecReceivedDamageBy60Chance: 0.temp setDecSkillDamageTakenPerc: 0.^ temp.! !Dota subclass: #Item	instanceVariableNames: 'itemName cost quantity'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Item commentStamp: 'CemalBurakAygun 5/20/2017 11:59' prior: 0!Representation of an Item (generic).	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>	itemName 		(string)			Name of the item.	cost 			(nonnegative integer)			Cost the the item.	quantity 		(nonnegative integer)			The number of this item a hero bought.!!Item methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:41'!setItemName: aStringitemName := aString.! !!Item methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:41'!setCost: aNonnegativeIntegercost := aNonnegativeInteger.! !!Item methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:41'!setQuantity: aNonnegativeIntegerquantity := aNonnegativeInteger.! !!Item methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 19:16'!getCost^ cost.! !!Item methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 19:16'!getItemName^ itemName.! !!Item methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 19:16'!getQuantity^ quantity.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Item class	instanceVariableNames: ''!!Item class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:17'!new^ self subclassResponsibility.! !Item subclass: #BattleFury	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!BattleFury commentStamp: 'CemalBurakAygun 5/20/2017 12:00' prior: 0!Representation of Butterfly item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BattleFury class	instanceVariableNames: ''!!BattleFury class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:17'!new| temp |temp := self basicNew.temp setItemName: 'Battle Fury'.temp setCost: 4500.temp setQuantity: 0.^ temp.! !Item subclass: #Butterfly	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Butterfly commentStamp: 'CemalBurakAygun 5/19/2017 13:43' prior: 0!Representation of Butterfly item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Butterfly class	instanceVariableNames: ''!!Butterfly class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:17'!new| temp |temp := self basicNew.temp setItemName: 'Butterfly'.temp setCost: 5500.temp setQuantity: 0.^ temp.! !Item subclass: #Daedalus	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Daedalus commentStamp: 'CemalBurakAygun 5/19/2017 13:43' prior: 0!Representation of Daedalus item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Daedalus class	instanceVariableNames: ''!!Daedalus class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:17'!new| temp |temp := self basicNew.temp setItemName: 'Daedalus'.temp setCost: 5500.temp setQuantity: 0.^ temp.! !Item subclass: #Desolator	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Desolator commentStamp: 'CemalBurakAygun 5/19/2017 13:43' prior: 0!Representation of Desolator item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Desolator class	instanceVariableNames: ''!!Desolator class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:17'!new| temp |temp := self basicNew.temp setItemName: 'Desolator'.temp setCost: 4000.temp setQuantity: 0.^ temp.! !Item subclass: #EnergyBooster	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!EnergyBooster commentStamp: 'CemalBurakAygun 5/19/2017 13:43' prior: 0!Representation of Energy Booster item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnergyBooster class	instanceVariableNames: ''!!EnergyBooster class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:17'!new| temp |temp := self basicNew.temp setItemName: 'Energy Booster'.temp setCost: 1100.temp setQuantity: 0.^ temp.! !Item subclass: #HealthPotion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!HealthPotion commentStamp: 'CemalBurakAygun 5/19/2017 13:43' prior: 0!Representation of Health Potion item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HealthPotion class	instanceVariableNames: ''!!HealthPotion class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:18'!new| temp |temp := self basicNew.temp setItemName: 'Health Potion'.temp setCost: 200.temp setQuantity: 0.^ temp.! !Item subclass: #HeartOfTarrasque	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!HeartOfTarrasque commentStamp: 'CemalBurakAygun 5/19/2017 13:43' prior: 0!Representation of Hearth of Tarrasque item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeartOfTarrasque class	instanceVariableNames: ''!!HeartOfTarrasque class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:18'!new| temp |temp := self basicNew.temp setItemName: 'Heart of Tarrasque'.temp setCost: 5600.temp setQuantity: 0.^ temp.! !Item subclass: #HoodOfDefiance	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!HoodOfDefiance commentStamp: 'CemalBurakAygun 5/19/2017 13:44' prior: 0!Representation of Hood of Defiance item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HoodOfDefiance class	instanceVariableNames: ''!!HoodOfDefiance class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:18'!new| temp |temp := self basicNew.temp setItemName: 'Hood of Defiance'.temp setCost: 2000.temp setQuantity: 0.^ temp.! !Item subclass: #ManaPotion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!ManaPotion commentStamp: 'CemalBurakAygun 5/19/2017 13:44' prior: 0!Representation of Mana Potion item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaPotion class	instanceVariableNames: ''!!ManaPotion class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:18'!new| temp |temp := self basicNew.temp setItemName: 'Mana Potion'.temp setCost: 200.temp setQuantity: 0.^ temp.! !Hero subclass: #Scourge	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Scourge commentStamp: 'CemalBurakAygun 5/19/2017 15:01' prior: 0!Representation of a Scourge Hero (generic).!Scourge subclass: #Leshrac	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Leshrac commentStamp: 'CemalBurakAygun 5/19/2017 12:18' prior: 0!Representation of Leshrac.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Leshrac class	instanceVariableNames: ''!!Leshrac class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Leshrac'.temp setMaxHP: 1518.temp setCurHP: 1518.temp setMaxMP: 1534.temp setCurMP: 1534.temp setActiveSkills: { SplitEarth new . PulseNova new }.temp setArmor: 12.temp setAttackRange: #(133 137).^ temp.! !Scourge subclass: #Lion	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Lion commentStamp: 'CemalBurakAygun 5/19/2017 13:34' prior: 0!Representation of Lion.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Lion class	instanceVariableNames: ''!!Lion class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Lion'.temp setMaxHP: 1609.temp setCurHP: 1609.temp setMaxMP: 1456.temp setCurMP: 1456.temp setActiveSkills: { EarthSpike new . FingerOfDeath new }.temp setArmor: 9.temp setAttackRange: #(139 145).^ temp.! !Scourge subclass: #Mortred	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Mortred commentStamp: 'CemalBurakAygun 5/19/2017 12:18' prior: 0!Representation of Mortred.!!Mortred methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 16:34'!getAttackDamage	"Calculates the attack damage of Mortred considering the effects of the passive skill Coup de Grace."		"Returns: Attack damage of Mortred. (nonnegative integer)"| randomNumber baseDamage |baseDamage := super getAttackDamage.	randomNumber := (1 to: 100) atRandom.(randomNumber <= 15)   				"The effect (x4 damage with 15% chance) of the passive skill Coup de Grace."ifTrue: [ Transcript show: 'x4 Damage for Mortred thanks to the passive skill Coup de Grace.' ; cr.				^ (baseDamage * 4)].^ baseDamage.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mortred class	instanceVariableNames: ''!!Mortred class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/20/2017 12:11'!new| temp |temp := super new.temp setHeroName: 'Mortred'.temp setMaxHP: 1754.temp setCurHP: 1754.temp setMaxMP: 892.temp setCurMP: 892.temp setActiveSkills: #().temp setArmor: 18.temp setAttackRange: #(142 144).temp setEvasionChance: 40.			"The effect (40% chance of evasion) of the passive skill Blur."^ temp.! !Scourge subclass: #NyxAssassin	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!NyxAssassin commentStamp: 'CemalBurakAygun 5/19/2017 12:18' prior: 0!Representation of Nyx Assassin.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NyxAssassin class	instanceVariableNames: ''!!NyxAssassin class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Nyx Assassin'.temp setMaxHP: 1784.temp setCurHP: 1784.temp setMaxMP: 1149.temp setCurMP: 1149.temp setActiveSkills: { Impale new . ManaBurn new }.temp setArmor: 14.temp setAttackRange: #(122 126).^ temp.! !Hero subclass: #Sentinel	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Sentinel commentStamp: 'CemalBurakAygun 5/19/2017 15:01' prior: 0!Representation of a Sentinel Hero (generic).!Sentinel subclass: #Earthshaker	instanceVariableNames: 'isEffectOfEnchantTotemValid'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Earthshaker commentStamp: 'CemalBurakAygun 5/19/2017 13:36' prior: 0!Representation of Earthshaker.	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>	isEffectOfEnchantTotemValid 		(boolean)			When it is true, it states that Earthshaker used the active skill Enchant Totem at one of his previous turns and the effect (x4 damage for the next attack) of Enchant Totem is valid.			When it is false, it states that the effect of Enchant Totem is not valid.!!Earthshaker methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/20/2017 12:10'!getAttackDamage	"Calculates the attack damage of Eartshaker considering the effect of the active skill Enchant Totem."		"Returns: Attack damage of Earthshaker. (nonnegative integer)"| baseDamage |baseDamage := super getAttackDamage.	isEffectOfEnchantTotemValid				"The effect (x4 damage for the next attack) of the active skill Enchant Totem."ifTrue: [ Transcript show: 'x4 Damage for Earthshaker thanks to the active skill Enchant Totem used before.' ; cr.				^ (baseDamage * 4)].^ baseDamage.! !!Earthshaker methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 12:36'!setIsEffectOfEnchantTotemValid: aBoolean	isEffectOfEnchantTotemValid := aBoolean.! !!Earthshaker methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 12:36'!getIsEffectOfEnchantTotemValid	^ isEffectOfEnchantTotemValid.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Earthshaker class	instanceVariableNames: ''!!Earthshaker class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:36'!new| temp |temp := super new.temp setHeroName: 'Earthshaker'.temp setMaxHP: 2270.temp setCurHP: 2270.temp setMaxMP: 1030.temp setCurMP: 1030.temp setActiveSkills: { Fissure new . EnchantTotem new }.temp setArmor: 10.temp setAttackRange: #(136 146).temp setIsEffectOfEnchantTotemValid: false.		"The effect (x4 damage for the next attack) of the active skill Enchant Totem."^ temp.! !Sentinel subclass: #Magina	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Magina commentStamp: 'CemalBurakAygun 5/19/2017 12:38' prior: 0!Representation of Magina.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Magina class	instanceVariableNames: ''!!Magina class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Magina'.temp setMaxHP: 1495.temp setCurHP: 1495.temp setMaxMP: 1017.temp setCurMP: 1017.temp setActiveSkills: { ManaVoid new }.temp setArmor: 14.temp setAttackRange: #(136 140).^ temp.! !Sentinel subclass: #Mirana	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Mirana commentStamp: 'CemalBurakAygun 5/19/2017 12:38' prior: 0!Representation of Mirana.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Mirana class	instanceVariableNames: ''!!Mirana class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Mirana'.temp setMaxHP: 1697.temp setCurHP: 1697.temp setMaxMP: 996.temp setCurMP: 996.temp setActiveSkills: { Starstorm new . SacredArrow new }.temp setArmor: 16.temp setAttackRange: #(137 148).^ temp.! !Sentinel subclass: #OgreMagi	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!OgreMagi commentStamp: 'CemalBurakAygun 5/19/2017 12:38' prior: 0!Representation of Ogre Magi.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OgreMagi class	instanceVariableNames: ''!!OgreMagi class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Ogre Magi'.temp setMaxHP: 2426.temp setCurHP: 2426.temp setMaxMP: 1105.temp setCurMP: 1105.temp setActiveSkills: { Fireblast new }.temp setArmor: 16.temp setAttackRange: #(126 132).^ temp.! !Sentinel subclass: #Rylai	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Rylai commentStamp: 'CemalBurakAygun 5/19/2017 12:38' prior: 0!Representation of Rylai.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Rylai class	instanceVariableNames: ''!!Rylai class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Rylai'.temp setMaxHP: 1609.temp setCurHP: 1609.temp setMaxMP: 1373.temp setCurMP: 1373.temp setActiveSkills: { FrostBite new . FreezingField new }.temp setArmor: 9.temp setAttackRange: #(125 131).^ temp.! !Scourge subclass: #SkeletonKing	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!SkeletonKing commentStamp: 'CemalBurakAygun 5/19/2017 12:18' prior: 0!Representation of Skeleton King.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SkeletonKing class	instanceVariableNames: ''!!SkeletonKing class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:02'!new| temp |temp := super new.temp setHeroName: 'Skeleton King'.temp setMaxHP: 2270.temp setCurHP: 2270.temp setMaxMP: 993.temp setCurMP: 993.temp setActiveSkills: { WraithfireBlast new }.temp setArmor: 11.temp setAttackRange: #(151 153).^ temp.! !Dota subclass: #Skill	instanceVariableNames: 'skillName'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Skill commentStamp: 'CemalBurakAygun 5/19/2017 13:45' prior: 0!Representation of a Skill (generic).	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>				skillName 		(string)			Name of the skill.!!Skill methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 19:03'!getSkillName	^ skillName.! !!Skill methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:45'!setSkillName: aString	skillName := aString.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Skill class	instanceVariableNames: ''!!Skill class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:04'!new^ self subclassResponsibility.! !Skill subclass: #ActiveSkill	instanceVariableNames: 'maxCooldown curCooldown manaUsage damage'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!ActiveSkill commentStamp: 'CemalBurakAygun 5/20/2017 11:52' prior: 0!Representation of an Active Skill (generic).	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>				maxCooldown 		(nonnegative integer)			The cooldown this active skill has to wait immediately after its usage.				curCooldown 		(nonnegative integer)			The current cooldown this active skill has to wait before it can be used again.				manaUsage 		(nonnegative integer)			The value of mana usage of this active skill.				damage 		(nonnegative integer)			The value of skill damage this active skill gives to the enemy. If the skill has no damage attribute in the game, it is set to 0.!!ActiveSkill methodsFor: 'setters' stamp: 'CemalBurakAygun 5/16/2017 21:34'!setCurCooldown: cldwn	curCooldown := cldwn.! !!ActiveSkill methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:50'!setManaUsage: aNonnegativeInteger	manaUsage := aNonnegativeInteger.! !!ActiveSkill methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:50'!setMaxCooldown: aNonnegativeIntegermaxCooldown := aNonnegativeInteger.! !!ActiveSkill methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 13:50'!setDamage: aNonnegativeIntegerdamage := aNonnegativeInteger.! !!ActiveSkill methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 19:06'!getMaxCooldown	^ maxCooldown.! !!ActiveSkill methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 21:34'!getCurCooldown	^ curCooldown.! !!ActiveSkill methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 21:33'!getDamage^ damage.! !!ActiveSkill methodsFor: 'getters' stamp: 'CemalBurakAygun 5/16/2017 19:06'!getManaUsage	^ manaUsage.! !ActiveSkill subclass: #AnchorSmash	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!AnchorSmash commentStamp: 'CemalBurakAygun 5/20/2017 11:53' prior: 0!Representation of the active skill Anchor Smash.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AnchorSmash class	instanceVariableNames: ''!!AnchorSmash class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new	| temp |	temp := self basicNew.temp setSkillName: 'Anchor Smash'.temp setMaxCooldown: 3.temp setCurCooldown: 0.temp setManaUsage: 60.temp setDamage: 225.^ temp.! !ActiveSkill subclass: #EarthSpike	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!EarthSpike commentStamp: 'CemalBurakAygun 5/20/2017 11:53' prior: 0!Representation of the active skill Earth Spike.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EarthSpike class	instanceVariableNames: ''!!EarthSpike class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 22:23'!new	| temp |temp := self basicNew.temp setSkillName: 'Earth Spike'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 160.temp setDamage: 260.^ temp.! !ActiveSkill subclass: #EnchantTotem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!EnchantTotem commentStamp: 'CemalBurakAygun 5/20/2017 11:53' prior: 0!Representation of the active skill Enchant Totem.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EnchantTotem class	instanceVariableNames: ''!!EnchantTotem class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Enchant Totem'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 50.temp setDamage: 0.^ temp.! !ActiveSkill subclass: #FingerOfDeath	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!FingerOfDeath commentStamp: 'CemalBurakAygun 5/20/2017 11:53' prior: 0!Representation of the active skill Finger of Death.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FingerOfDeath class	instanceVariableNames: ''!!FingerOfDeath class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Finger of Death'.temp setMaxCooldown: 8.temp setCurCooldown: 0.temp setManaUsage: 650.temp setDamage: 850.^ temp.! !ActiveSkill subclass: #Fireblast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Fireblast commentStamp: 'CemalBurakAygun 5/20/2017 11:53' prior: 0!Representation of the active skill Fireblast.!!Fireblast methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 16:32'!getDamage	"Calculates the skill damage the active skill Fireblast gives to the enemy."	"The effect of the passive skill Multicast is implemented in this method."		"Returns: Skill damage of Fireblast. (nonnegative integer)"| rand randomNumber |rand := Random new.randomNumber := (rand next) * 100.		"Random number is a float in the range [0 , 100)."(randomNumber < 2.5)			"If randomNumber is in the range [0 , 2.5), returns x1 damage."ifTrue: [ ^ damage ].				"2.5% chance for x1 damage (no effect of Multicast)"(randomNumber < 15)			"If randomNumber is in the range [2.5 , 15), returns x4 damage."ifTrue: [ ^ (damage * 4) ].		"12.5% chance for x2 damage (effect of Multicast)"(randomNumber < 40)			"If randomNumber is in the range [15 , 40), returns x3 damage."ifTrue: [ ^ (damage * 3) ].		"25% chance for x3 damage (effect of Multicast)"											"If randomNumber is in the range [40 , 100), returns x2 damage."^ (damage * 2).						"%60 chance for x4 damage (effect of Multicast)"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fireblast class	instanceVariableNames: ''!!Fireblast class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Fireblast'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 225.temp setDamage: 220.^ temp.! !ActiveSkill subclass: #Fissure	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Fissure commentStamp: 'CemalBurakAygun 5/20/2017 11:54' prior: 0!Representation of the active skill Fissure.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fissure class	instanceVariableNames: ''!!Fissure class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Fissure'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 170.temp setDamage: 260.^ temp.! !ActiveSkill subclass: #FreezingField	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!FreezingField commentStamp: 'CemalBurakAygun 5/20/2017 11:54' prior: 0!Representation of the active skill Freezing Field.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FreezingField class	instanceVariableNames: ''!!FreezingField class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Freezing Field'.temp setMaxCooldown: 8.temp setCurCooldown: 0.temp setManaUsage: 600.temp setDamage: 800.^ temp.! !ActiveSkill subclass: #FrostBite	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!FrostBite commentStamp: 'CemalBurakAygun 5/20/2017 11:54' prior: 0!Representation of the active skill Frost Bite.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!FrostBite class	instanceVariableNames: ''!!FrostBite class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Frost Bite'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 150.temp setDamage: 300.^ temp.! !ActiveSkill subclass: #GodsStrength	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!GodsStrength commentStamp: 'CemalBurakAygun 5/20/2017 11:55' prior: 0!Representation of the active skill God's Strength.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GodsStrength class	instanceVariableNames: ''!!GodsStrength class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/17/2017 22:53'!new| temp |temp := self basicNew.temp setSkillName: 'God''s Strength'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 200.temp setDamage: 0.^ temp.! !ActiveSkill subclass: #Impale	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Impale commentStamp: 'CemalBurakAygun 5/20/2017 11:55' prior: 0!Representation of the active skill Impale.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Impale class	instanceVariableNames: ''!!Impale class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Impale'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 225.temp setDamage: 260.^ temp.! !ActiveSkill subclass: #ManaBurn	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!ManaBurn commentStamp: 'CemalBurakAygun 5/20/2017 11:55' prior: 0!Representation of the active skill Mana Burn.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaBurn class	instanceVariableNames: ''!!ManaBurn class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Mana Burn'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 50.temp setDamage: 0.^ temp.! !ActiveSkill subclass: #ManaVoid	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!ManaVoid commentStamp: 'CemalBurakAygun 5/20/2017 11:55' prior: 0!Representation of the active skill Mana Void.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManaVoid class	instanceVariableNames: ''!!ManaVoid class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Mana Void'.temp setMaxCooldown: 7.temp setCurCooldown: 0.temp setManaUsage: 275.temp setDamage: 0.^ temp.! !ActiveSkill subclass: #PulseNova	instanceVariableNames: 'isActivated'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!PulseNova commentStamp: 'CemalBurakAygun 5/20/2017 11:55' prior: 0!Representation of the active skill Pulse Nova.	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>				isActivated 		(boolean)			When it is true, it states that Leshrac used and activated Pulse Nova at one of the previous turns.			When it is false, it states that Pulse Nova is not active currently.!!PulseNova methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 18:56'!setIsActivated: aBooleanisActivated := aBoolean.! !!PulseNova methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 18:56'!getIsActivated^ isActivated.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PulseNova class	instanceVariableNames: ''!!PulseNova class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 18:56'!new| temp |temp := self basicNew.temp setSkillName: 'Pulse Nova'.temp setMaxCooldown: 0.temp setCurCooldown: 0.temp setManaUsage: 150.temp setDamage: 50.temp setIsActivated: false.^ temp.! !ActiveSkill subclass: #Ravage	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Ravage commentStamp: 'CemalBurakAygun 5/20/2017 11:56' prior: 0!Representation of the active skill Ravage.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Ravage class	instanceVariableNames: ''!!Ravage class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Ravage'.temp setMaxCooldown: 8.temp setCurCooldown: 0.temp setManaUsage: 325.temp setDamage: 380.^ temp.! !ActiveSkill subclass: #SacredArrow	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!SacredArrow commentStamp: 'CemalBurakAygun 5/20/2017 11:56' prior: 0!Representation of the active skill Sacred Arrow.!!SacredArrow methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 16:32'!getDamage	"Calculates the skill damage Sacred Arrow gives to the enemy."		"Returns: Skill damage of Sacred Arrow. (nonnegative integer)"	| randomNumber |	randomNumber := (1 to: 100) atRandom.		"randomNumber is an integer in the interval [1 , 100]."(randomNumber <= 75)ifTrue: [ ^ damage ].		"75% chance of 320 damage."Transcript show: 'Mirana got unlucky. Sacred Arrow missed its target.' ; cr.^ 0.								"25% chance of no damage."! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SacredArrow class	instanceVariableNames: ''!!SacredArrow class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Sacred Arrow'.temp setMaxCooldown: 4.temp setCurCooldown: 0.temp setManaUsage: 100.temp setDamage: 320.^ temp.! !ActiveSkill subclass: #SplitEarth	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!SplitEarth commentStamp: 'CemalBurakAygun 5/20/2017 11:57' prior: 0!Representation of the active skill Split Earth.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SplitEarth class	instanceVariableNames: ''!!SplitEarth class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Split Earth'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 160.temp setDamage: 300.^ temp.! !ActiveSkill subclass: #Starstorm	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Starstorm commentStamp: 'CemalBurakAygun 5/20/2017 11:57' prior: 0!Representation of the active skill Starstorm.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Starstorm class	instanceVariableNames: ''!!Starstorm class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Starstorm'.temp setMaxCooldown: 4.temp setCurCooldown: 0.temp setManaUsage: 160.temp setDamage: 300.^ temp.! !ActiveSkill subclass: #StormHammer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!StormHammer commentStamp: 'CemalBurakAygun 5/20/2017 11:57' prior: 0!Representation of the active skill Storm Hammer.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StormHammer class	instanceVariableNames: ''!!StormHammer class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Storm Hammer'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 140.temp setDamage: 325.^ temp.! !Sentinel subclass: #Sven	instanceVariableNames: 'effectOfGodsStrength'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Sven commentStamp: 'CemalBurakAygun 5/19/2017 13:38' prior: 0!Representation of Sven.	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>	effectOfGodsStrength 		(nonnegative integer)			When it is greater than 0, it states that Sven used the active skill God's Strength within last 3 turns and the effect (x2 damage for 3 turn) of God's Strength is valid. When this skill first used, GameArena sets this variable to 4 and decrease it by 1 until it is 0 at each next turn of Sven. (Note: Because of my implementation, GameArena needs to set this variable to 4 instead of 3, but its effect will be valid exactly 3 turns.)			When it is equal to 0, it states that the effect of God's Strength is not valid.!!Sven methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 12:48'!getEffectOfGodsStrength	^ effectOfGodsStrength.! !!Sven methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 12:48'!setEffectOfGodsStrength: turnNumber	effectOfGodsStrength := turnNumber.! !!Sven methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/20/2017 12:11'!getAttackDamage	"Calculates the attack damage of Sven considering the effect of the active skill God's Strength."		"Returns: Attack damage of Sven. (nonnegative integer)"| baseDamage |	baseDamage := super getAttackDamage.	(effectOfGodsStrength > 0)			"The effect (x2 damage for 3 turn) of the active skill God's Strength."ifTrue: [ Transcript show: 'x2 Damage for Sven thanks to the active skill God''s Strength used before.' ; cr.				^ (baseDamage * 2)].^ baseDamage.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Sven class	instanceVariableNames: ''!!Sven class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/19/2017 12:48'!new| temp |temp := super new.temp setHeroName: 'Sven'.temp setMaxHP: 2198.temp setCurHP: 2198.temp setMaxMP: 874.temp setCurMP: 874.temp setActiveSkills: { StormHammer new . GodsStrength new }.temp setArmor: 14.temp setAttackRange: #(149 151).temp setEffectOfGodsStrength: 0.			"The effect (x2 damage for 3 turn) of the active skill God's Strength."^ temp.! !Scourge subclass: #Tidehunter	instanceVariableNames: 'isEffectOfAnchorSmashValid'	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Tidehunter commentStamp: 'CemalBurakAygun 5/19/2017 13:36' prior: 0!Representation of Tidehunter.	<instanceVariableName> 		(<expectedType>)			<SomeExplanation>	isEffectOfAnchorSmashValid 		(boolean)			When it is true, it states that Tidehunter used the active skill Anchor Smash at his last turn and the effect (decreasing the enemy attack 60% for 1 turn) of Anchor Smash is valid.			When it is false, it states that the effect of Anchor Smash is not valid.!!Tidehunter methodsFor: 'setters' stamp: 'CemalBurakAygun 5/19/2017 12:38'!setIsEffectOfAnchorSmashValid: aBooleanisEffectOfAnchorSmashValid := aBoolean.! !!Tidehunter methodsFor: 'getters' stamp: 'CemalBurakAygun 5/19/2017 12:37'!getIsEffectOfAnchorSmashValid^ isEffectOfAnchorSmashValid.! !!Tidehunter methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/20/2017 12:09'!getActualAttackDamage: givenDamage	"Calculates the actual attack damage Tidehunter gets considering the effect of the active skill Anchor Smash) when the enemy gives the attack damage givenDamage."	"Expected Parameter Types: givenDamage (nonnegative integer)"	"Returns: Actual attack damage given to Tidehunter. (nonnegative integer)"| baseActualDamage |	baseActualDamage := super getActualAttackDamage: givenDamage.	isEffectOfAnchorSmashValid 			"The effect (decrease enemy attack 60% for 1 turn) of the active skill Anchor Smash."ifTrue: [ Transcript show: 'Actual attack damage given to Tidehunter was decreased 60% thanks to the active skill Anchor Smash used before.' ; cr.				^ ((baseActualDamage * 0.4) rounded)].	^ baseActualDamage.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Tidehunter class	instanceVariableNames: ''!!Tidehunter class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/20/2017 12:12'!new| temp |temp := super new.temp setHeroName: 'Tidehunter'.temp setMaxHP: 2316.temp setCurHP: 2316.temp setMaxMP: 998.temp setCurMP: 998.temp setActiveSkills: { AnchorSmash new . Ravage new }.temp setArmor: 11.temp setAttackRange: #(139 145).temp setIsEffectOfAnchorSmashValid: false.		"The effect (decrease enemy attack 60% for 1 turn) of the active skill Anchor Smash."^ temp.! !Item subclass: #Vanguard	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!Vanguard commentStamp: 'CemalBurakAygun 5/19/2017 13:44' prior: 0!Representation of Vanguard item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Vanguard class	instanceVariableNames: ''!!Vanguard class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:18'!new| temp |temp := self basicNew.temp setItemName: 'Vanguard'.temp setCost: 2500.temp setQuantity: 0.^ temp.! !Item subclass: #VitalityBooster	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!VitalityBooster commentStamp: 'CemalBurakAygun 5/19/2017 13:44' prior: 0!Representation of Vitality Booster item(s).!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VitalityBooster class	instanceVariableNames: ''!!VitalityBooster class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 19:18'!new| temp |temp := self basicNew.temp setItemName: 'Vitality Booster'.temp setCost: 1200.temp setQuantity: 0.^ temp.! !ActiveSkill subclass: #WraithfireBlast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '2014400072'!!WraithfireBlast commentStamp: 'CemalBurakAygun 5/20/2017 11:57' prior: 0!Representation of the active skill Wraithfire Blast.!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!WraithfireBlast class	instanceVariableNames: ''!!WraithfireBlast class methodsFor: 'as yet unclassified' stamp: 'CemalBurakAygun 5/16/2017 21:34'!new| temp |temp := self basicNew.temp setSkillName: 'Wraithfire Blast'.temp setMaxCooldown: 5.temp setCurCooldown: 0.temp setManaUsage: 140.temp setDamage: 300.^ temp.! !